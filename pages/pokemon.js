import Head from 'next/head'
import Navbar from '@components/Navbar';
import Code from '@components/Code';
import { useRef } from 'react';
import { useAtom } from 'jotai';
import { pokemonAtom } from '@store/useAtom';

export default function Pokemon() {

  const [pokemons, setPokemons] = useAtom(pokemonAtom)
  const pokemonNameRef = useRef()
  function removeAllPokemons() {
    setPokemons([])
  }
  function restoreAllPokemons() {
    setPokemons([
      { id: 1, name: "🐞 Bulbasaur" },
      { id: 2, name: "🦖 Ivysaur" },
      { id: 3, name: "🐙 Venusaur" },
      { id: 4, name: "🐉 Charmander" },
      { id: 5, name: "🐧 Charmeleon" }
    ])
  }
  function handleAddPokemon() {
    const value = pokemonNameRef.current.value
    if (value !== "") {
      setPokemons([
        ...pokemons,
        { name: value, id: Math.random() * 100 },
      ])
    }
    else alert("pokemon name cannot empty !")
    pokemonNameRef.current.value = ''
  }
  function handleRemovePokemon(id) {
    setPokemons(pokemons.filter((pokemon) => pokemon.id !== id))
  }

  return (
    <>
      <Head>
        <title>Pokemon Data 🐞 🦖 🐙 🐉 🐧</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dark:bg-neutral-900 min-h-screen pb-8">

        <Navbar />

        <div className="max-w-5xl px-4 mx-auto pt-4 class">
          <h1 className="dark:text-white text-2xl font-semibold">Pokemon Data 🐞 🦖 🐙 🐉 🐧</h1>

          <div className="my-8 dark:text-white">
            <ul className="dark:text-white my-2 space-y-2">
              {pokemons.map(pokemon =>
                <li key={pokemon.id}>
                  {pokemon.name}
                  <button onClick={() => handleRemovePokemon(pokemon.id)} className={`bg-red-500 hover:bg-red-600 font-medium transition-all cursor-pointer text-white rounded px-1.5 text-sm ml-2`}>X</button>
                </li>
              )}
            </ul>
            <span className="mt-2 dark:text-white">{pokemons.length} pokemons found</span>
            <p className="dark:text-white my-2">Add a new pokemon</p>
            <div className="mb-2">
              <input ref={pokemonNameRef} className="px-1.5 mr-2 h-7 border border-gray-300 dark:border-neutral-700 rounded bg-gray-100 dark:bg-neutral-800 dark:text-white focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500" />
              <button onClick={handleAddPokemon} className={`bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>add pokemon</button>
            </div>
            <button onClick={removeAllPokemons} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">remove all</button>
            <button onClick={restoreAllPokemons} className="bg-teal-500 hover:bg-teal-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">restore all</button>
          </div>

          <Code name="store/useAtom" code={`import { atomWithStorage } from 'jotai/utils';

export const pokemonAtom = atomWithStorage('pokemon', [
  { id: 1, name: "🐞 Bulbasaur" },
  { id: 2, name: "🦖 Ivysaur" },
  { id: 3, name: "🐙 Venusaur" },
  { id: 4, name: "🐉 Charmander" },
  { id: 5, name: "🐧 Charmeleon" }
])`} />

          <Code name="pages/pokemon" code={`import { useRef } from 'react';
import { useAtom } from 'jotai';
import { pokemonAtom } from '@store/useAtom';

export default function Pokemon() {

  const [pokemons, setPokemons] = useAtom(pokemonAtom)
  const pokemonNameRef = useRef()
  function removeAllPokemons() {
    setPokemons([])
  }
  function restoreAllPokemons() {
    setPokemons([
      { id: 1, name: "🐞 Bulbasaur" },
      { id: 2, name: "🦖 Ivysaur" },
      { id: 3, name: "🐙 Venusaur" },
      { id: 4, name: "🐉 Charmander" },
      { id: 5, name: "🐧 Charmeleon" }
    ])
  }
  function handleAddPokemon() {
    const value = pokemonNameRef.current.value
    if (value !== "") {
      setPokemons([
        ...pokemons,
        { name: value, id: Math.random() * 100 },
      ])
    }
    else alert("pokemon name cannot empty !")
    pokemonNameRef.current.value = ''
  }
  function handleRemovePokemon(id) {
    setPokemons(pokemons.filter((pokemon) => pokemon.id !== id))
  }

  return (
    <ul>
      {pokemons.map(pokemon =>
        <li key={pokemon.id}>
          {pokemon.name}
          <button onClick={() => handleRemovePokemon(pokemon.id)}>X</button>
        </li>
      )}
    </ul>
    <span>{pokemons.length} pokemons found</span>
    <p>Add a new pokemon</p>
    <div>
      <input ref={pokemonNameRef} />
      <button onClick={handleAddPokemon}>add pokemon</button>
    </div>
    <button onClick={removeAllPokemons}>remove all</button>
    <button onClick={restoreAllPokemons}>restore all</button> 
  )
}`} />

        </div>
      </main >
    </>
  )
}
