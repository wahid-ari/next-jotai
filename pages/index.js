import Head from 'next/head'
import Navbar from '@components/Navbar';
import axios from "axios";
import { useState, useRef } from 'react';

import { useAtom, useAtomValue } from 'jotai';
import {
  countAtom,
  nameAtom,
  bearAtom,
  lionAtom,
  sharkAtom,
  fishAtom,
  fruitsAtom,
  userAtom,
  repoAtom,
  pokemonAtom,
  usePokemons,
  studentAtom
} from '@store/useAtom';
import { useStudents } from '@hooks/useStudents';

export default function Home() {
  const [count, setCount] = useAtom(countAtom)
  const [name, setName] = useAtom(nameAtom)
  const inputNameRef = useRef()
  function handleChangeName() {
    const value = inputNameRef.current.value
    if (value !== "") setName(value)
    else alert("name cannot empty !")
    inputNameRef.current.value = ''
  }
  const [bear, setBear] = useAtom(bearAtom)
  const [lion, setLion] = useAtom(lionAtom)
  const [shark, setShark] = useAtom(sharkAtom)

  const [fish, setFish] = useAtom(fishAtom)

  const [fruits, setFruits] = useAtom(fruitsAtom)
  function addFruit(newFruit) {
    setFruits([...fruits, newFruit])
  }
  function removeFruit() {
    setFruits(fruits.slice(0, -1))
  }
  function removeAllFruits() {
    setFruits([])
  }
  function restoreAllFruits() {
    setFruits(['apple üçè', 'banana üçå', 'orange üçä'])
  }
  const inputFruitRef = useRef()
  function handleAddFruit() {
    const value = inputFruitRef.current.value
    if (value !== "") addFruit(value)
    else alert("fruit name cannot empty !")
    inputFruitRef.current.value = "";
  }

  const [user, setUser] = useAtom(userAtom)
  async function handleFetch() {
    const response = await fetch(`${process.env.API_URL}/api/users/vercel`);
    const json = await response.json();
    setUser(json)
  }
  function resetUser() {
    setUser({})
  }

  const [repo, setRepo] = useAtom(repoAtom)
  async function handleFetchRepo(param = 'nextjs') {
    setRepo({ ...repo, loading: true })
    try {
      const response = await axios.get(`${process.env.API_URL}/api/repos/${param}`);
      setRepo({ ...repo, data: response.data, loading: false })
    } catch (err) {
      console.error(err)
      setRepo({ ...repo, hasErrors: true, loading: false })
    }
  }
  function resetRepo() {
    setRepo({
      data: {},
      loading: false,
      hasErrors: false
    })
  }

  const [pokemons, setPokemons] = useAtom(pokemonAtom)
  const { addPokemon,
    removePokemon,
    removeAllPokemons,
    restoreAllPokemons } = usePokemons()
  const pokemonNameRef = useRef()

  function handleAddPokemon() {
    const value = pokemonNameRef.current.value
    if (value !== "") addPokemon(value)
    else alert("pokemon name cannot empty !")
    pokemonNameRef.current.value = ''
  }

  const students = useAtomValue(studentAtom)
  const { addStudent,
    updateStudent,
    removeStudent,
    removeAllStudents,
    restoreAllStudents } = useStudents()
  const studentNameRef = useRef()
  const [edited, setEdited] = useState({ id: null, name: '', show: false })

  function handleAddStudent() {
    const value = studentNameRef.current.value
    if (value !== "") addStudent(value)
    else alert("student name cannot empty !")
    studentNameRef.current.value = ''
  }

  function handleEditStudent(id, name) {
    setEdited({ id: id, name: name, show: true })
  }

  function handleUpdateStudent() {
    if (edited.name === "") {
      alert("student name cannot empty !")
    }
    else {
      updateStudent(edited.id, edited.name)
      setEdited({ id: null, name: '', show: false })
    }
  }

  return (
    <>
      <Head>
        <title>Default Jotai</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dark:bg-neutral-900 min-h-screen pb-8">

        <Navbar />

        <div className="max-w-5xl px-4 mx-auto pt-4 class">
          <h1 className="dark:text-white text-2xl font-semibold pb-4">Default Jotai</h1>

          <div className="my-10">
            <h1 className="text-lg font-medium mb-2 dark:text-white">Count Data üé∞</h1>
            <p className="dark:text-white my-2">{count} count</p>
            <button onClick={() => setCount(count + 1)} className="bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">increment 1</button>
            <button onClick={() => setCount(count + 5)} className="bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">increment 5</button>
            <button onClick={() => setCount(count - 1)} className="bg-red-500 hover:bg-red-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">decrement 1</button>
            <button onClick={() => setCount(count - 5)} className="bg-red-500 hover:bg-red-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">decrement 5</button>
            <button onClick={() => setCount(0)} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">reset</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Count, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we refreshed the page, the value will reset to 0</p>
          </div>

          <div className="my-10">
            <h1 className="text-lg font-medium mb-2 dark:text-white">Name Data üòÄ</h1>
            <p className="dark:text-white my-2">Name : {name}</p>
            <div className="mb-2">
              <input ref={inputNameRef} className="px-1.5 mr-2 h-7 border border-gray-300 dark:border-neutral-700 rounded bg-gray-100 dark:bg-neutral-800 dark:text-white focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500" />
              <button onClick={handleChangeName} className={`bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>change name</button>
            </div>
            <button onClick={() => setName("John Doe")} className={`bg-red-500 hover:bg-red-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>reset name</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Name, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we refreshed the page, the value will reset to John Doe</p>
          </div>

          <div className="my-10">
            <h1 className="text-lg font-medium mb-2 dark:text-white">Bears Data üêª</h1>
            <p className="dark:text-white my-2">{bear} bears around here</p>
            <button onClick={() => setBear(bear + 1)} className="bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">increase</button>
            <button onClick={() => setBear(bear - 1)} className="bg-red-500 hover:bg-red-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">decrease</button>
            <button onClick={() => setBear(0)} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">remove</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Bear, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we refreshed the page, the value will reset to 1</p>
          </div>

          <div className="my-10">
            <h1 className="text-lg font-medium mb-2 dark:text-white">Lions Data ü¶Å</h1>
            <p className="dark:text-white my-2">{lion} lion around here</p>
            <button onClick={() => setLion(lion + 1)} disabled={lion === 5} className={`${lion === 5 && 'cursor-not-allowed'} bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>increase</button>
            <button onClick={() => setLion(lion - 1)} disabled={lion === 0} className={`${lion === 0 && 'cursor-not-allowed'} bg-red-500 hover:bg-red-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>decrease</button>
            <button onClick={() => setLion(0)} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">remove</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Lion, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we refreshed the page, the value will reset to 2</p>
          </div>

          <div className="my-10">
            <h1 className="text-lg font-medium mb-2 dark:text-white">Sharks Data ü¶à</h1>
            <p className="dark:text-white my-2">{shark} shark around here</p>
            <button onClick={() => setShark(shark < 5 ? shark + 1 : 5)} className={`${shark === 5 && 'cursor-not-allowed'} bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>increase</button>
            <button onClick={() => setShark(shark > 0 ? shark - 1 : 0)} className={`${shark === 0 && 'cursor-not-allowed'} bg-red-500 hover:bg-red-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>decrease</button>
            <button onClick={() => setShark(0)} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">remove</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Shark, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we refreshed the page, the value will reset to 3</p>
          </div>

          <div className="my-10">
            <h1 className="text-lg font-medium mb-2 dark:text-white">Fishs Data üêü</h1>
            <p className="dark:text-white my-2">{fish} fishs around here</p>
            <button onClick={() => setFish(fish + 1)} className={`bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>increase</button>
            <button onClick={() => setFish(fish - 1)} className={`bg-red-500 hover:bg-red-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>decrease</button>
            <button onClick={() => setFish(0)} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">remove</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Fish, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we refreshed the page, the value will be same as the last value</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">this is example how to use jotai persist to save state to localStorage</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we see in Application &gt; Local Storage, it will show &apos;fish&apos; with current fish value</p>
          </div>

          <div className="my-10">
            <h1 className="text-lg font-medium mb-2 dark:text-white">Fruits Data üçè üçå üçä</h1>
            <ul className="dark:text-white my-2">
              {fruits.map((fruit, index) =>
                <li key={index}>{fruit}</li>
              )}
            </ul>
            <span className="mt-2 dark:text-white">{fruits.length} fruits available</span>
            <p className="dark:text-white my-2">Add a new fruit</p>
            <div className="mb-2">
              <input ref={inputFruitRef} className="px-1.5 mr-2 h-7 border border-gray-300 dark:border-neutral-700 rounded bg-gray-100 dark:bg-neutral-800 dark:text-white focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500" />
              <button onClick={handleAddFruit} className={`bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>add fruit</button>
            </div>
            <button onClick={removeFruit} className={`bg-red-500 hover:bg-red-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>remove last</button>
            <button onClick={removeAllFruits} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">remove all</button>
            <button onClick={restoreAllFruits} className="bg-teal-500 hover:bg-teal-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">restore all</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Fruit, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we refreshed the page, the value will reset to [apple üçè, banana üçå, orange üçä]</p>
          </div>

          <div className="my-10 dark:text-white">
            <h1 className="text-lg font-medium mb-2">User Data üë®üèª‚Äçüíª</h1>
            <p>Name : {user.name}</p>
            <p>Bio : {user.bio}</p>
            <p>Type : {user.type}</p>
            <p>Public users : {user.repos}</p>
            <p>Blog : {user.blog}</p>
            <p>Location : {user.location}</p>
            <p>Email : {user.email}</p>
            <button onClick={handleFetch} className="bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mt-2 mr-2">Fetch user</button>
            <button onClick={resetUser} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">Reset user</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /User, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">this example how to fetch and save the data to state using jotai</p>
          </div>

          <div className="my-10 dark:text-white">
            <h1 className="text-lg font-medium mb-2">Repo Data üßë‚Äçüíª</h1>
            <p>Loading : {repo.loading ? 'true' : 'false'}</p>
            <p className="mb-2">hasErrors : {repo.hasErrors ? 'true' : 'false'}</p>
            <p>Name : {repo.data.name}</p>
            <p>Full Name : {repo.data.full_name}</p>
            <p>Language : {repo.data.language}</p>
            <p>Homepage : {repo.data.homepage ? <a className="text-blue-500 hover:text-blue-600 transition-all cursor-pointer" href={repo.data.homepage} target="_blank" rel="noreferrer">{repo.data.homepage}</a> : "-"}</p>
            <p>Description : {repo.data.description}</p>
            <p>Repo URL : {repo.data.repo_url ? <a className="text-blue-500 hover:text-blue-600 transition-all cursor-pointer" href={repo.data.repo_url} target="_blank" rel="noreferrer">{repo.data.repo_url}</a> : "-"}</p>
            <p>License : {repo.data.license}</p>
            <p>Owner : {repo.data.owner}</p>
            <button onClick={() => handleFetchRepo()} className="bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mt-2 mr-2">Fetch repo</button>
            <button onClick={() => handleFetchRepo('react')} className="bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mt-2 mr-2">Fetch react</button>
            <button onClick={resetRepo} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">Reset repo</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Repo, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">this example how to fetch using axios and save the data to state using jotai</p>
          </div>

          <div className="my-10">
            <h1 className="text-lg font-medium mb-2 dark:text-white">Pokemon Data üêû ü¶ñ üêô üêâ üêß</h1>
            <ul className="dark:text-white my-2 space-y-2">
              {pokemons.map(item =>
                <li key={item.id}>
                  {item.name}
                  <button onClick={() => removePokemon(item.id)} className={`bg-red-500 hover:bg-red-600 font-medium transition-all cursor-pointer text-white rounded px-1.5 text-sm ml-2`}>X</button>
                </li>
              )}
            </ul>
            <span className="mt-2 dark:text-white">{pokemons.length} pokemons found</span>
            <p className="dark:text-white my-2">Add a new pokemon</p>
            <div className="mb-2">
              <input ref={pokemonNameRef} className="px-1.5 mr-2 h-7 border border-gray-300 dark:border-neutral-700 rounded bg-gray-100 dark:bg-neutral-800 dark:text-white focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500" />
              <button onClick={handleAddPokemon} className={`bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>add pokemon</button>
            </div>
            <button onClick={removeAllPokemons} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">remove all</button>
            <button onClick={restoreAllPokemons} className="bg-teal-500 hover:bg-teal-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">restore all</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Pokemon, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we refreshed the page, the value will be same as the last value</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">this is example how to use jotai persist to save state to localStorage</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">if we see in Application &gt; Local Storage, it will show &apos;pokemon&apos; with current pokemon value</p>
          </div>

          <div className="my-10">
            <h1 className="text-lg font-medium mb-2 dark:text-white">Student Data üßëüèª‚Äçüéì</h1>
            <ul className="dark:text-white my-2 space-y-2">
              {students.map(student =>
                <li key={student.id}>
                  {student.name}
                  <button onClick={() => handleEditStudent(student.id, student.name)} className={`bg-yellow-500 hover:bg-yellow-600 font-medium transition-all cursor-pointer text-white rounded text-sm ml-2`}>‚úèÔ∏è</button>
                  <button onClick={() => removeStudent(student.id)} className={`bg-red-500 hover:bg-red-600 font-medium transition-all cursor-pointer text-white rounded px-1.5 text-sm ml-2`}>X</button>
                </li>
              )}
            </ul>
            <span className="mt-2 dark:text-white">{students.length} students found</span>
            <p className="dark:text-white my-2">Add a new student</p>
            <div className="mb-2">
              <input ref={studentNameRef} className="px-1.5 mr-2 h-7 border border-gray-300 dark:border-neutral-700 rounded bg-gray-100 dark:bg-neutral-800 dark:text-white focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500" />
              <button onClick={handleAddStudent} className={`bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>add student</button>
            </div>
            {edited.show &&
              <>
                <p className="dark:text-white my-2">Edit student</p>
                <div className="mb-4">
                <input value={edited.name} onChange={(e) => setEdited({ ...edited, name: e.target.value })} className="px-1.5 mr-2 h-7 border border-gray-300 dark:border-neutral-700 rounded bg-gray-100 dark:bg-neutral-800 dark:text-white focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500" />
                  <button onClick={handleUpdateStudent} className={`bg-violet-500 hover:bg-violet-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>Update student</button>
                  <button onClick={() => setShowEdit(false)} className={`bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>Cancel</button>
                </div>
              </>
            }
            <button onClick={removeAllStudents} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">remove all</button>
            <button onClick={restoreAllStudents} className="bg-teal-500 hover:bg-teal-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">restore all</button>
            <p className="text-gray-500 dark:text-gray-300 mt-2 text-sm">try change here and visit /Student, the value will be same</p>
            <p className="text-gray-500 dark:text-gray-300 text-sm">this example how to add, edit and remove data to state using jotai</p>
          </div>

          {/* <Code name="pages/index" code={``} /> */}

        </div>
      </main >
    </>
  )
}
