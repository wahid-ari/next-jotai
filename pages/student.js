import Head from 'next/head'
import Navbar from '@components/Navbar';
import Code from '@components/Code';
import { useRef, useState } from 'react';
import { useAtomValue } from 'jotai';
import { studentAtom } from '@store/useAtom';
import { useStudents } from '@hooks/useStudents';

export default function Student() {

  const students = useAtomValue(studentAtom)
  const { addStudent,
    updateStudent,
    removeStudent,
    removeAllStudents,
    restoreAllStudents } = useStudents()
  const studentNameRef = useRef()
  const [edited, setEdited] = useState({ id: null, name: '', show: false })

  function handleAddStudent() {
    const value = studentNameRef.current.value
    if (value !== "") addStudent(value)
    else alert("student name cannot empty !")
    studentNameRef.current.value = ''
  }

  function handleEditStudent(id, name) {
    setEdited({ id: id, name: name, show: true })
  }

  function handleUpdateStudent() {
    if (edited.name === "") {
      alert("student name cannot empty !")
    }
    else {
      updateStudent(edited.id, edited.name)
      setEdited({ id: null, name: '', show: false })
    }
  }

  return (
    <>
      <Head>
        <title>Student Data 🧑🏻‍🎓</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="dark:bg-neutral-900 min-h-screen pb-8">

        <Navbar />

        <div className="max-w-5xl px-4 mx-auto pt-4 class">
          <h1 className="dark:text-white text-2xl font-semibold">Student Data 🧑🏻‍🎓</h1>

          <div className="my-8 dark:text-white">
            <ul className="dark:text-white my-2 space-y-2">
              {students.map(student =>
                <li key={student.id}>
                  {student.name}
                  <button onClick={() => handleEditStudent(student.id, student.name)} className={`bg-yellow-500 hover:bg-yellow-600 font-medium transition-all cursor-pointer text-white rounded text-sm ml-2`}>✏️</button>
                  <button onClick={() => removeStudent(student.id)} className={`bg-red-500 hover:bg-red-600 font-medium transition-all cursor-pointer text-white rounded px-1.5 text-sm ml-2`}>X</button>
                </li>
              )}
            </ul>
            <span className="mt-2 dark:text-white">{students.length} students found</span>
            <p className="dark:text-white my-2">Add a new student</p>
            <div className="mb-2">
              <input ref={studentNameRef} className="px-1.5 mr-2 h-7 border border-gray-300 dark:border-neutral-700 rounded bg-gray-100 dark:bg-neutral-800 dark:text-white focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500" />
              <button onClick={handleAddStudent} className={`bg-blue-500 hover:bg-blue-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>add student</button>
            </div>
            {edited.show &&
              <>
                <p className="dark:text-white my-2">Edit student</p>
                <div className="mb-4">
                  <input value={edited.name} onChange={(e) => setEdited({ ...edited, name: e.target.value })} className="px-1.5 mr-2 h-7 border border-gray-300 dark:border-neutral-700 rounded bg-gray-100 dark:bg-neutral-800 dark:text-white focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500" />
                  <button onClick={handleUpdateStudent} className={`bg-violet-500 hover:bg-violet-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>Update student</button>
                  <button onClick={() => setShowEdit(false)} className={`bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2`}>Cancel</button>
                </div>
              </>
            }
            <button onClick={removeAllStudents} className="bg-orange-500 hover:bg-orange-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">remove all</button>
            <button onClick={restoreAllStudents} className="bg-teal-500 hover:bg-teal-600 transition-all cursor-pointer text-white rounded py-1 px-2 text-sm mr-2">restore all</button>
          </div>

          <Code name="store/useAtom" code={`import { atom } from 'jotai';
          
export const studentData = [
  { id: '1', name: 'Aaron Saunders' },
  { id: '2', name: 'Andrea Saunders' },
  { id: '3', name: 'Bill Smith' },
  { id: '4', name: 'John Chambers' },
  { id: '5', name: 'Joe Johnson' }
]
export const studentAtom = atom(studentData)`} />
          
          <Code name="hooks/useStudents" code={`import { useAtom } from 'jotai';
import { studentAtom, studentData } from '@store/useAtom';

export function useStudents() {
  const [students, setStudents] = useAtom(studentAtom)
  function addStudent(name) {
    setStudents([
      ...students,
      { name: name, id: Math.random() * 100 },
    ])
  }
  function updateStudent(id, name) {
    setStudents(students.map(item => {
      if (item.id === id) {
        return {
          ...item,
          name: name
        };
      } else {
        return item;
      }
    }))
  }
  function removeStudent(id) {
    setStudents(students.filter((student) => student.id !== id))
  }
  function removeAllStudents() {
    setStudents([])
  }
  function restoreAllStudents() {
    setStudents(studentData)
  }
  return {
    addStudent,
    updateStudent,
    removeStudent,
    removeAllStudents,
    restoreAllStudents
  }
}`} />

          <Code name="pages/student" code={`import { useRef, useState } from 'react';
import { useAtomValue } from 'jotai';
import { studentAtom } from '@store/useAtom';
import { useStudents } from '@hooks/useStudents';

export default function Student() {

  const students = useAtomValue(studentAtom)
  const { addStudent,
    updateStudent,
    removeStudent,
    removeAllStudents,
    restoreAllStudents } = useStudents()
  const studentNameRef = useRef()
  const [edited, setEdited] = useState({ id: null, name: '', show: false })

  function handleAddStudent() {
    const value = studentNameRef.current.value
    if (value !== "") addStudent(value)
    else alert("student name cannot empty !")
    studentNameRef.current.value = ''
  }

  function handleEditStudent(id, name) {
    setEdited({ id: id, name: name, show: true })
  }

  function handleUpdateStudent() {
    if (edited.name === "") {
      alert("student name cannot empty !")
    }
    else {
      updateStudent(edited.id, edited.name)
      setEdited({ id: null, name: '', show: false })
    }
  }

  return (
    <ul>
      {students.map(student =>
        <li key={student.id}>
          {student.name}
          <button onClick={() => handleEditStudent(student.id, student.name)}>✏️</button>
          <button onClick={() => removeStudent(student.id)}>X</button>
        </li>
      )}
    </ul>
    <span>{students.length} students found</span>
    <p>Add a new student</p>
    <div>
      <input ref={studentNameRef} />
      <button onClick={handleAddStudent}>add student</button>
    </div>
    {edited.show &&
      <>
        <p>Edit student</p>
        <div>
          <input value={edited.name} onChange={(e) => setEdited({ ...edited, name: e.target.value })}/>
          <button onClick={handleUpdateStudent}>Update student</button>
          <button onClick={() => setShowEdit(false)}>Cancel</button>
        </div>
      </>
    }
    <button onClick={removeAllStudents}>remove all</button>
    <button onClick={restoreAllStudents}>restore all</button>
  )
}`} />

        </div>
      </main >
    </>
  )
}
